// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { DeleteSizeData, GetSizeByIdData, GetSizeByIdResponse, UpdateSizeData, UpdateSizeResponse, DeleteReviewData, GetReviewByIdData, GetReviewByIdResponse, UpdateReviewData, UpdateReviewResponse, DeletePromotionData, GetPromotionByIdData, GetPromotionByIdResponse, UpdatePromotionData, UpdatePromotionResponse, DeleteProductData, GetProductByIdData, GetProductByIdResponse, UpdateProductData, UpdateProductResponse, DeleteOrderData, GetOrderByIdData, GetOrderByIdResponse, UpdateOrderData, UpdateOrderResponse, DeleteColoredProductData, GetColoredProductData, GetColoredProductResponse, UpdateColoredProductData, UpdateColoredProductResponse, DeleteCategoryData, GetCategoryByIdData, GetCategoryByIdResponse, UpdateCategoryData, UpdateCategoryResponse, GetAllSizesData, GetAllSizesResponse, CreateSizeData, CreateSizeResponse, GetAllReviewsData, GetAllReviewsResponse, CreateReviewData, CreateReviewResponse, GetAllPromotionsData, GetAllPromotionsResponse, CreatePromotionData, CreatePromotionResponse, CreatePromotionsData, CreatePromotionsResponse, GetAllProductsData, GetAllProductsResponse, CreateProductData, CreateProductResponse, GetAllOrdersData, GetAllOrdersResponse, CreateOrderData, CreateOrderResponse, GetColoredProductsData, GetColoredProductsResponse, CreateColoredProductData, CreateColoredProductResponse, GetAllCategoriesData, GetAllCategoriesResponse, CreateCategoryData, CreateCategoryResponse, GetUserOrdersData, GetUserOrdersResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const deleteSize = <ThrowOnError extends boolean = false>(options: Options<DeleteSizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sizes/{id}',
        ...options
    });
};

export const getSizeById = <ThrowOnError extends boolean = false>(options: Options<GetSizeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSizeByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sizes/{id}',
        ...options
    });
};

export const updateSize = <ThrowOnError extends boolean = false>(options: Options<UpdateSizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSizeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sizes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteReview = <ThrowOnError extends boolean = false>(options: Options<DeleteReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reviews/{id}',
        ...options
    });
};

export const getReviewById = <ThrowOnError extends boolean = false>(options: Options<GetReviewByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReviewByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reviews/{id}',
        ...options
    });
};

export const updateReview = <ThrowOnError extends boolean = false>(options: Options<UpdateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reviews/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePromotion = <ThrowOnError extends boolean = false>(options: Options<DeletePromotionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions/{id}',
        ...options
    });
};

export const getPromotionById = <ThrowOnError extends boolean = false>(options: Options<GetPromotionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPromotionByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions/{id}',
        ...options
    });
};

export const updatePromotion = <ThrowOnError extends boolean = false>(options: Options<UpdatePromotionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePromotionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteProduct = <ThrowOnError extends boolean = false>(options: Options<DeleteProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/products/{id}',
        ...options
    });
};

export const getProductById = <ThrowOnError extends boolean = false>(options: Options<GetProductByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/products/{id}',
        ...options
    });
};

export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/products/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteOrder = <ThrowOnError extends boolean = false>(options: Options<DeleteOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders/{id}',
        ...options
    });
};

export const getOrderById = <ThrowOnError extends boolean = false>(options: Options<GetOrderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders/{id}',
        ...options
    });
};

export const updateOrder = <ThrowOnError extends boolean = false>(options: Options<UpdateOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteColoredProduct = <ThrowOnError extends boolean = false>(options: Options<DeleteColoredProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/colored-products/{id}',
        ...options
    });
};

export const getColoredProduct = <ThrowOnError extends boolean = false>(options: Options<GetColoredProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetColoredProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/colored-products/{id}',
        ...options
    });
};

export const updateColoredProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateColoredProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateColoredProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/colored-products/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{id}',
        ...options
    });
};

export const getCategoryById = <ThrowOnError extends boolean = false>(options: Options<GetCategoryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{id}',
        ...options
    });
};

export const updateCategory = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllSizes = <ThrowOnError extends boolean = false>(options?: Options<GetAllSizesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSizesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sizes',
        ...options
    });
};

export const createSize = <ThrowOnError extends boolean = false>(options: Options<CreateSizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSizeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sizes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllReviews = <ThrowOnError extends boolean = false>(options?: Options<GetAllReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reviews',
        ...options
    });
};

export const createReview = <ThrowOnError extends boolean = false>(options: Options<CreateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllPromotions = <ThrowOnError extends boolean = false>(options?: Options<GetAllPromotionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPromotionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions',
        ...options
    });
};

export const createPromotion = <ThrowOnError extends boolean = false>(options: Options<CreatePromotionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePromotionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createPromotions = <ThrowOnError extends boolean = false>(options: Options<CreatePromotionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePromotionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions/batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllProducts = <ThrowOnError extends boolean = false>(options?: Options<GetAllProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllProductsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/products',
        ...options
    });
};

export const createProduct = <ThrowOnError extends boolean = false>(options?: Options<CreateProductData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateProductResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/products',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const getAllOrders = <ThrowOnError extends boolean = false>(options: Options<GetAllOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOrdersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders',
        ...options
    });
};

export const createOrder = <ThrowOnError extends boolean = false>(options: Options<CreateOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getColoredProducts = <ThrowOnError extends boolean = false>(options?: Options<GetColoredProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetColoredProductsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/colored-products',
        ...options
    });
};

export const createColoredProduct = <ThrowOnError extends boolean = false>(options?: Options<CreateColoredProductData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateColoredProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/colored-products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllCategories = <ThrowOnError extends boolean = false>(options?: Options<GetAllCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCategoriesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories',
        ...options
    });
};

export const createCategory = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserOrders = <ThrowOnError extends boolean = false>(options: Options<GetUserOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserOrdersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/orders/me',
        ...options
    });
};