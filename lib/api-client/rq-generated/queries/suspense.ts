// generated with @7nohe/openapi-react-query-codegen@1.6.2

import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { CategoryControllerService, HeadingControllerService, OrderControllerService, ProductControllerService, ProductVariantControllerService, PromotionProductControllerService, ReviewControllerService, SizeControllerService } from "../requests/services.gen";
import * as Common from "./common";
export const useSizeControllerServiceGetApiSizesByIdSuspense = <TData = Common.SizeControllerServiceGetApiSizesByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseSizeControllerServiceGetApiSizesByIdKeyFn({ id }, queryKey), queryFn: () => SizeControllerService.getApiSizesById({ id }) as TData, ...options });
export const useSizeControllerServiceGetApiSizesSuspense = <TData = Common.SizeControllerServiceGetApiSizesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseSizeControllerServiceGetApiSizesKeyFn(queryKey), queryFn: () => SizeControllerService.getApiSizes() as TData, ...options });
export const useReviewControllerServiceGetApiReviewsByIdSuspense = <TData = Common.ReviewControllerServiceGetApiReviewsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseReviewControllerServiceGetApiReviewsByIdKeyFn({ id }, queryKey), queryFn: () => ReviewControllerService.getApiReviewsById({ id }) as TData, ...options });
export const useReviewControllerServiceGetApiReviewsSuspense = <TData = Common.ReviewControllerServiceGetApiReviewsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseReviewControllerServiceGetApiReviewsKeyFn(queryKey), queryFn: () => ReviewControllerService.getApiReviews() as TData, ...options });
export const usePromotionProductControllerServiceGetApiPromotionProductsByIdSuspense = <TData = Common.PromotionProductControllerServiceGetApiPromotionProductsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UsePromotionProductControllerServiceGetApiPromotionProductsByIdKeyFn({ id }, queryKey), queryFn: () => PromotionProductControllerService.getApiPromotionProductsById({ id }) as TData, ...options });
export const usePromotionProductControllerServiceGetApiPromotionProductsSuspense = <TData = Common.PromotionProductControllerServiceGetApiPromotionProductsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UsePromotionProductControllerServiceGetApiPromotionProductsKeyFn(queryKey), queryFn: () => PromotionProductControllerService.getApiPromotionProducts() as TData, ...options });
export const useProductControllerServiceGetApiProductsByIdSuspense = <TData = Common.ProductControllerServiceGetApiProductsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseProductControllerServiceGetApiProductsByIdKeyFn({ id }, queryKey), queryFn: () => ProductControllerService.getApiProductsById({ id }) as TData, ...options });
export const useProductControllerServiceGetApiProductsSuspense = <TData = Common.ProductControllerServiceGetApiProductsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseProductControllerServiceGetApiProductsKeyFn(queryKey), queryFn: () => ProductControllerService.getApiProducts() as TData, ...options });
export const useProductVariantControllerServiceGetApiProductVariantsByIdSuspense = <TData = Common.ProductVariantControllerServiceGetApiProductVariantsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseProductVariantControllerServiceGetApiProductVariantsByIdKeyFn({ id }, queryKey), queryFn: () => ProductVariantControllerService.getApiProductVariantsById({ id }) as TData, ...options });
export const useProductVariantControllerServiceGetApiProductVariantsSuspense = <TData = Common.ProductVariantControllerServiceGetApiProductVariantsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ productId }: {
  productId?: string;
} = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseProductVariantControllerServiceGetApiProductVariantsKeyFn({ productId }, queryKey), queryFn: () => ProductVariantControllerService.getApiProductVariants({ productId }) as TData, ...options });
export const useOrderControllerServiceGetApiOrdersByIdSuspense = <TData = Common.OrderControllerServiceGetApiOrdersByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrderControllerServiceGetApiOrdersByIdKeyFn({ id }, queryKey), queryFn: () => OrderControllerService.getApiOrdersById({ id }) as TData, ...options });
export const useOrderControllerServiceGetApiOrdersSuspense = <TData = Common.OrderControllerServiceGetApiOrdersDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrderControllerServiceGetApiOrdersKeyFn(queryKey), queryFn: () => OrderControllerService.getApiOrders() as TData, ...options });
export const useOrderControllerServiceGetApiOrdersUserOrdersSuspense = <TData = Common.OrderControllerServiceGetApiOrdersUserOrdersDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrderControllerServiceGetApiOrdersUserOrdersKeyFn(queryKey), queryFn: () => OrderControllerService.getApiOrdersUserOrders() as TData, ...options });
export const useCategoryControllerServiceGetApiCategoriesByIdSuspense = <TData = Common.CategoryControllerServiceGetApiCategoriesByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCategoryControllerServiceGetApiCategoriesByIdKeyFn({ id }, queryKey), queryFn: () => CategoryControllerService.getApiCategoriesById({ id }) as TData, ...options });
export const useCategoryControllerServiceGetApiCategoriesSuspense = <TData = Common.CategoryControllerServiceGetApiCategoriesDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseCategoryControllerServiceGetApiCategoriesKeyFn(queryKey), queryFn: () => CategoryControllerService.getApiCategories() as TData, ...options });
export const useHeadingControllerServiceGetApiHeadingsSuspense = <TData = Common.HeadingControllerServiceGetApiHeadingsDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseHeadingControllerServiceGetApiHeadingsKeyFn(queryKey), queryFn: () => HeadingControllerService.getApiHeadings() as TData, ...options });
export const useHeadingControllerServiceGetApiHeadingsByIdSuspense = <TData = Common.HeadingControllerServiceGetApiHeadingsByIdDefaultResponse, TError = unknown, TQueryKey extends Array<unknown> = unknown[]>({ id }: {
  id: string;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseHeadingControllerServiceGetApiHeadingsByIdKeyFn({ id }, queryKey), queryFn: () => HeadingControllerService.getApiHeadingsById({ id }) as TData, ...options });
